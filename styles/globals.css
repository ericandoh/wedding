@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: theme('colors.gray.200');
  }
}

@layer components {
  .font-sans {
    font-family: var(--font-inter), ui-sans-serif, system-ui, sans-serif;
  }
  
  .font-serif {
    font-family: var(--font-cormorant), ui-serif, Georgia, serif;
  }
  
  .font-script {
    font-family: var(--font-dancing), cursive;
  }
  
  .font-allura {
    font-family: var(--font-allura), cursive;
  }
  
  .font-great-vibes {
    font-family: var(--font-great-vibes), cursive;
  }
  
  .font-satisfy {
    font-family: var(--font-satisfy), cursive;
  }
}

@keyframes shimmer {
  0% {
    opacity: 0;
  }
  30% {
    opacity: 1;
  }
  70% {
    opacity: 1;
  }
  100% {
    transform: translateX(150%);
    opacity: 0;
  }
}

@keyframes rerender {
  0%,
  40% {
    border-color: currentColor;
  }
}

@keyframes highlight {
  0%,
  40% {
    background: theme('colors.blue.600');
    color: theme('colors.blue.100');
  }
}

@keyframes loading {
  0% {
    opacity: 0.2;
  }
  20% {
    opacity: 1;
    transform: translateX(1px);
  }
  100% {
    opacity: 0.2;
  }
}

.spinner {
  background: conic-gradient(transparent 10deg, white, transparent 320deg);

  /* Mask to create a hollow center üç© */
  --border-size: 3px;
  mask-image: radial-gradient(
    closest-side,
    transparent calc(100% - var(--border-size)),
    white calc(100% - var(--border-size))
  );

  /* Animation:
     - opacity: render invisible and use animations to reveal spinner
     - fade: fade in after delay to prevent flashes of UI on fast navigations 
     - rotate: rotate indefinitely while rendered */
  opacity: 0;
  animation:
    fade 500ms 150ms forwards,
    rotate 1s linear infinite;
}

@keyframes rotate {
  to {
    transform: rotate(360deg);
  }
}

.transition-enter {
  opacity: 1;
  transform: scale(1);
  transition:
    opacity 0.5s,
    transform 0.5s;

  @starting-style {
    opacity: 0;
    transform: scale(0.95);
  }
}

@keyframes fade {
  from {
    filter: blur(3px);
    opacity: 0;
  }
  to {
    filter: blur(0);
    opacity: 1;
  }
}

@keyframes slide {
  from {
    translate: var(--slide-offset);
  }
  to {
    translate: 0;
  }
}

::view-transition-new(.animate-slide-from-left) {
  --slide-offset: -60px;
  animation:
    var(--duration-enter) ease-out var(--duration-exit) both fade,
    var(--duration-move) ease-in-out both slide;
}
::view-transition-old(.animate-slide-to-right) {
  --slide-offset: 60px;
  animation:
    var(--duration-exit) ease-in both fade reverse,
    var(--duration-move) ease-in-out both slide reverse;
}

::view-transition-new(.animate-slide-from-right) {
  --slide-offset: 60px;
  animation:
    var(--duration-enter) ease-out var(--duration-exit) both fade,
    var(--duration-move) ease-in-out both slide;
}

::view-transition-old(.animate-slide-to-left) {
  --slide-offset: -60px;
  animation:
    var(--duration-exit) ease-in both fade reverse,
    var(--duration-move) ease-in-out both slide reverse;
}

::view-transition-group(.animate-morph) {
  animation-duration: var(--duration-move);
}

/* 
 * Using view-transition-image-pair and not view-transition-group to preserve
 * the default animation which includes automatic position and scale morphing
 */
::view-transition-image-pair(.animate-morph) {
  animation-name: via-blur;
}

/* 
 * Blur animation for view transitions with shared elements. 
 * Fast-moving elements can be visually jarring as the eye tries
 * to track them. This creates a poor man's motion blur we can
 * use to make these transitions smoother.
 */
@keyframes via-blur {
  30% {
    filter: blur(3px);
  }
}

/* Hide scrollbar for horizontal navigation */
.scrollbar-hide {
  -ms-overflow-style: none;  /* Internet Explorer 10+ */
  scrollbar-width: none;  /* Firefox */
}
.scrollbar-hide::-webkit-scrollbar {
  display: none;  /* Safari and Chrome */
}